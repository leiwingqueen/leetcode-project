package dp

// 有两种形状的瓷砖：一种是 2 x 1 的多米诺形，另一种是形如 "L" 的托米诺形。两种形状都可以旋转。
//
//
//
//给定整数 n ，返回可以平铺 2 x n 的面板的方法的数量。返回对 109 + 7 取模 的值。
//
//平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。
//
//
//
//示例 1:
//
//
//
//输入: n = 3
//输出: 5
//解释: 五种不同的方法如上所示。
//示例 2:
//
//输入: n = 1
//输出: 1
//
//
//提示：
//
//1 <= n <= 1000
//
//来源：力扣（LeetCode）
//链接：https://leetcode.cn/problems/domino-and-tromino-tiling
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

// f0(n)=f0(n-1)+f0(n-2)+f2(n-2)+f1(n-2)
// f1(n)=f0(n-1)+f2(n-1)
// f2(n)=f0(n-1)+f1(n-1)
func numTilings(n int) int {
	mod := 1_000_000_007
	dp0 := make([]int, n+1)
	dp1 := make([]int, n+1)
	dp2 := make([]int, n+1)
	dp0[0] = 1
	dp1[0] = 0
	dp2[0] = 0
	for i := 1; i <= n; i++ {
		dp0[i] = dp0[i-1]
		if i >= 2 {
			dp0[i] = (dp0[i] + dp0[i-2] + dp1[i-2] + dp2[i-2]) % mod
		}
		dp1[i] = (dp0[i-1] + dp2[i-1]) % mod
		dp2[i] = (dp0[i-1] + dp1[i-1]) % mod
	}
	return dp0[n]
}
