package dp

// 给你一个 n x n 的网格 grid ，代表一块樱桃地，每个格子由以下三种数字的一种来表示：
//
//0 表示这个格子是空的，所以你可以穿过它。
//1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。
//-1 表示这个格子里有荆棘，挡着你的路。
//请你统计并返回：在遵守下列规则的情况下，能摘到的最多樱桃数：
//
//从位置 (0, 0) 出发，最后到达 (n - 1, n - 1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为 0 或者 1 的格子）；
//当到达 (n - 1, n - 1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子；
//当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为 0 ）；
//如果在 (0, 0) 和 (n - 1, n - 1) 之间不存在一条可经过的路径，则无法摘到任何一个樱桃。
//
//
//示例 1：
//
//
//输入：grid = [[0,1,-1],[1,0,-1],[1,1,1]]
//输出：5
//解释：玩家从 (0, 0) 出发：向下、向下、向右、向右移动至 (2, 2) 。
//在这一次行程中捡到 4 个樱桃，矩阵变成 [[0,1,-1],[0,0,-1],[0,0,0]] 。
//然后，玩家向左、向上、向上、向左返回起点，再捡到 1 个樱桃。
//总共捡到 5 个樱桃，这是最大可能值。
//示例 2：
//
//输入：grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
//输出：0
//
//
//提示：
//
//n == grid.length
//n == grid[i].length
//1 <= n <= 50
//grid[i][j] 为 -1、0 或 1
//grid[0][0] != -1
//grid[n - 1][n - 1] != -1

// f(k,i,j),k为走了k步,i,j为别为两个人对应的x坐标。则有i<=k,j<=k
// f(k,i,j)=max(f(k-1,i-1,j-1))
// 时间复杂度O(n^3)
func cherryPickup(grid [][]int) int {
	n := len(grid)
	mxStep := 2*n - 2
	dirs := [][]int{
		{0, -1},
		{-1, 0},
	}
	// 初始化dp
	dp := make([][][]int, mxStep+1)
	for i := 0; i <= mxStep; i++ {
		dp[i] = make([][]int, n)
		for j := 0; j < n; j++ {
			dp[i][j] = make([]int, n)
		}
	}
	if grid[0][0] == 1 {
		dp[0][0][0] = 1
	}
	for k := 1; k <= mxStep; k++ {
		for i := 0; i <= min(n-1, k); i++ {
			for j := 0; j <= min(n-1, k); j++ {
				dp[k][i][j] = -1
				if k-i >= n || k-j >= n || grid[i][k-i] == -1 || grid[j][k-j] == -1 {
					// 不可达
					continue
				}
				for _, dir1 := range dirs {
					for _, dir2 := range dirs {
						x1, y1 := i+dir1[0], k-i+dir1[1]
						x2, y2 := j+dir2[0], k-j+dir2[1]
						if x1 >= 0 && x1 < n && y1 >= 0 && y1 < n && grid[x1][y1] >= 0 &&
							x2 >= 0 && x2 < n && y2 >= 0 && y2 < n && grid[x2][y2] >= 0 &&
							dp[k-1][x1][x2] >= 0 {
							sub := dp[k-1][x1][x2]
							if grid[i][k-i] == 1 {
								sub++
							}
							if grid[j][k-j] == 1 {
								sub++
							}
							if i == j && grid[i][k-i] == 1 {
								// 同一个格子不能重复计算
								sub--
							}
							dp[k][i][j] = max(dp[k][i][j], sub)
						}
					}
				}
			}
		}
	}
	if dp[mxStep][n-1][n-1] < 0 {
		return 0
	} else {
		return dp[mxStep][n-1][n-1]
	}
}

// [[0,1,1,0,0],[1,1,1,1,0],[-1,1,1,1,-1],[0,1,1,1,0],[1,0,-1,0,0]]
