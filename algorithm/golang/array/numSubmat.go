package array

// 给你一个 m x n 的二进制矩阵 mat ，请你返回有多少个 子矩形 的元素全部都是 1 。
//
//
//
//示例 1：
//
//
//
//输入：mat = [[1,0,1],[1,1,0],[1,1,0]]
//输出：13
//解释：
//有 6 个 1x1 的矩形。
//有 2 个 1x2 的矩形。
//有 3 个 2x1 的矩形。
//有 1 个 2x2 的矩形。
//有 1 个 3x1 的矩形。
//矩形数目总共 = 6 + 2 + 3 + 1 + 1 = 13 。
//示例 2：
//
//
//
//输入：mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]
//输出：24
//解释：
//有 8 个 1x1 的子矩形。
//有 5 个 1x2 的子矩形。
//有 2 个 1x3 的子矩形。
//有 4 个 2x1 的子矩形。
//有 2 个 2x2 的子矩形。
//有 2 个 3x1 的子矩形。
//有 1 个 3x2 的子矩形。
//矩形数目总共 = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24 。
//
//
//
//提示：
//
//1 <= m, n <= 150
//mat[i][j] 仅包含 0 或 1
//

// 先不考虑任何优化，也能勉强过
func numSubmat(mat [][]int) int {
	m, n := len(mat), len(mat[0])
	res := 0
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			// 以i,j为右下角的矩形有多少
			if mat[i][j] == 1 {
				// 最大的宽度
				lastLen := j
				// 枚举高度
				for h := 0; h <= i; h++ {
					if mat[i-h][j] == 0 {
						break
					}
					// 枚举宽度
					for l := 0; l <= lastLen; l++ {
						if mat[i-h][j-l] == 0 {
							lastLen = l - 1
							break
						}
						res++
					}
				}
			}
		}
	}
	return res
}
