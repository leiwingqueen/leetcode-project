package array

// 我们对 0 到 255 之间的整数进行采样，并将结果存储在数组 count 中：count[k] 就是整数 k 在样本中出现的次数。
//
//计算以下统计数据:
//
//minimum ：样本中的最小元素。
//maximum ：样品中的最大元素。
//mean ：样本的平均值，计算为所有元素的总和除以元素总数。
//median ：
//如果样本的元素个数是奇数，那么一旦样本排序后，中位数 median 就是中间的元素。
//如果样本中有偶数个元素，那么中位数median 就是样本排序后中间两个元素的平均值。
//mode ：样本中出现次数最多的数字。保众数是 唯一 的。
//以浮点数数组的形式返回样本的统计信息 [minimum, maximum, mean, median, mode] 。与真实答案误差在 10-5 内的答案都可以通过。
//
//
//
//示例 1：
//
//输入：count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
//输出：[1.00000,3.00000,2.37500,2.50000,3.00000]
//解释：用count表示的样本为[1,2,2,2,3,3,3,3]。
//最小值和最大值分别为1和3。
//均值是(1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375。
//因为样本的大小是偶数，所以中位数是中间两个元素2和3的平均值，也就是2.5。
//众数为3，因为它在样本中出现的次数最多。
//示例 2：
//
//输入：count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
//输出：[1.00000,4.00000,2.18182,2.00000,1.00000]
//解释：用count表示的样本为[1,1,1,1,2,2,3,3,3,4,4]。
//最小值为1，最大值为4。
//平均数是(1+1+1+1+2+2+2+3+3+4+4)/ 11 = 24 / 11 = 2.18181818…(为了显示，输出显示了整数2.18182)。
//因为样本的大小是奇数，所以中值是中间元素2。
//众数为1，因为它在样本中出现的次数最多。
//
//
//提示：
//
//count.length == 256
//0 <= count[i] <= 109
//1 <= sum(count) <= 109
// count 的众数是 唯一 的
//
//
//来源：力扣（LeetCode）
//链接：https://leetcode.cn/problems/statistics-from-a-large-sample
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

func sampleStats(count []int) []float64 {
	n := len(count)
	min := -1
	for i := 0; i < n; i++ {
		if count[i] > 0 {
			min = i
			break
		}
	}
	max := -1
	for i := n - 1; i >= 0; i-- {
		if count[i] > 0 {
			max = i
			break
		}
	}
	sum := 0
	cnt := 0
	for i, c := range count {
		cnt += c
		sum += i * c
	}
	mean := float64(sum) / float64(cnt)
	mode := 0
	for i := 0; i < n; i++ {
		if count[i] > count[mode] {
			mode = i
		}
	}
	// 中位数
	findPos := func(idx int) int {
		s := 0
		for i := 0; i < n; i++ {
			s += count[i]
			if s > idx {
				return i
			}
		}
		return -1
	}
	var median float64
	if cnt%2 == 1 {
		median = float64(findPos(cnt / 2))
	} else {
		n1 := findPos(cnt/2 - 1)
		n2 := findPos(cnt / 2)
		median = float64(n1+n2) / float64(2)
	}
	return []float64{float64(min), float64(max), mean, median, float64(mode)}
}
