package wc415

// 给你一个大小为 4 的整数数组 a 和一个大小 至少为 4 的整数数组 b。
//
//你需要从数组 b 中选择四个下标 i0, i1, i2, 和 i3，并满足 i0 < i1 < i2 < i3。你的得分将是 a[0] * b[i0] + a[1] * b[i1] + a[2] * b[i2] + a[3] * b[i3] 的值。
//
//返回你能够获得的 最大 得分。
//
//
//
//示例 1：
//
//输入： a = [3,2,5,6], b = [2,-6,4,-5,-3,2,-7]
//
//输出： 26
//
//解释：
//选择下标 0, 1, 2 和 5。得分为 3 * 2 + 2 * (-6) + 5 * 4 + 6 * 2 = 26。
//
//示例 2：
//
//输入： a = [-1,4,5,-2], b = [-5,-1,-3,-2,-4]
//
//输出： -1
//
//解释：
//选择下标 0, 1, 3 和 4。得分为 (-1) * (-5) + 4 * (-1) + 5 * (-2) + (-2) * (-4) = -1。
//
//
//
//提示：
//
//a.length == 4
//4 <= b.length <= 105
//-105 <= a[i], b[i] <= 105

// f(i,k)=max{f(i-1,k),f(i-1,k-1)+a[k]*b[i]}
func maxScore(a []int, b []int) int64 {
	n := len(b)
	dp := make([][]int64, n+1)
	for i := 0; i <= n; i++ {
		dp[i] = make([]int64, 5)
	}
	for i := 1; i <= n; i++ {
		for j := 1; j <= min(i, 4); j++ {
			// 要求j<=i
			if i == j {
				dp[i][j] = dp[i-1][j-1] + int64(a[j-1])*int64(b[i-1])
			} else {
				dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]+int64(a[j-1])*int64(b[i-1]))
			}
		}
	}
	return dp[n][4]
}
