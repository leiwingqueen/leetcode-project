package bwc135

// 给你一个长度为 n 的整数数组 nums ，n 是 偶数 ，同时给你一个整数 k 。
//
//你可以对数组进行一些操作。每次操作中，你可以将数组中 任一 元素替换为 0 到 k 之间的 任一 整数。
//
//执行完所有操作以后，你需要确保最后得到的数组满足以下条件：
//
//存在一个整数 X ，满足对于所有的 (0 <= i < n) 都有 abs(a[i] - a[n - i - 1]) = X 。
//请你返回满足以上条件 最少 修改次数。
//
//
//
//示例 1：
//
//输入：nums = [1,0,1,2,4,3], k = 4
//
//输出：2
//
//解释：
//我们可以执行以下操作：
//
//将 nums[1] 变为 2 ，结果数组为 nums = [1,2,1,2,4,3] 。
//将 nums[3] 变为 3 ，结果数组为 nums = [1,2,1,3,4,3] 。
//整数 X 为 2 。
//
//示例 2：
//
//输入：nums = [0,1,2,3,3,6,5,4], k = 6
//
//输出：2
//
//解释：
//我们可以执行以下操作：
//
//将 nums[3] 变为 0 ，结果数组为 nums = [0,1,2,0,3,6,5,4] 。
//将 nums[4] 变为 4 ，结果数组为 nums = [0,1,2,0,4,6,5,4] 。
//整数 X 为 4 。
//
//
//
//提示：
//
//2 <= n == nums.length <= 105
//n 是偶数。
//0 <= nums[i] <= k <= 105

// 假设我们选择的差距为X，这里分场景考虑
// d==X，那么我们不需要修改
// d>X，那么我们必然可以通过修改某一个值得到最终的值
// d<X，需要分场景考虑。
// 假设 n-1-a>=X||b>=X，我们只需要修改一次，这里等价于d<max(n-1-a,b)，只要一次。否则需要修改两次
// 否则 我们需要修改两次

// [0,max(n-1-a,b)]只需要修改一次，(max(n-1-a,b),k)需要修改两次
func minChanges(nums []int, k int) int {
	counter := make([]int, k+1)
	n := len(nums)
	l, r := 0, n-1
	for l < r {
		if nums[r] < nums[l] {
			nums[l], nums[r] = nums[r], nums[l]
		}
		d := nums[r] - nums[l]
		counter[d]++
		l++
		r--
	}
	return 0
}
