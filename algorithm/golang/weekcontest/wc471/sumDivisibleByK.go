package wc471

// 给你一个整数数组 nums 和一个整数 k。
//
//请返回一个整数，表示 nums 中所有其 出现次数 能被 k 整除的元素的总和；如果没有这样的元素，则返回 0 。
//
//注意： 若某个元素在数组中的总出现次数能被 k 整除，则它在求和中会被计算 恰好 与其出现次数相同的次数。
//
//元素 x 的 出现次数 指它在数组中出现的次数。
//
//
//
//示例 1：
//
//输入： nums = [1,2,2,3,3,3,3,4], k = 2
//
//输出： 16
//
//解释：
//
//数字 1 出现 1 次（奇数次）。
//数字 2 出现 2 次（偶数次）。
//数字 3 出现 4 次（偶数次）。
//数字 4 出现 1 次（奇数次）。
//因此总和为 2 + 2 + 3 + 3 + 3 + 3 = 16。
//
//示例 2：
//
//输入： nums = [1,2,3,4,5], k = 2
//
//输出： 0
//
//解释：
//
//没有元素出现偶数次，因此总和为 0。
//
//示例 3：
//
//输入： nums = [4,4,4,1,2,3], k = 3
//
//输出： 12
//
//解释：
//
//数字 1 出现 1 次。
//数字 2 出现 1 次。
//数字 3 出现 1 次。
//数字 4 出现 3 次。
//因此总和为 4 + 4 + 4 = 12。
//
//
//
//提示：
//
//1 <= nums.length <= 100
//1 <= nums[i] <= 100
//1 <= k <= 100

func sumDivisibleByK(nums []int, k int) int {
	mp := make(map[int]int)
	for _, num := range nums {
		mp[num]++
	}
	res := 0
	for num, cnt := range mp {
		if cnt%k == 0 {
			res += cnt * num
		}
	}
	return res
}
