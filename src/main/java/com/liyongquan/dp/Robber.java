package com.liyongquan.dp;

/**
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * <p>
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
 * <p>
 * 示例 1:
 * <p>
 * 输入: [1,2,3,1]
 * 输出: 4
 * 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃1 3 号房屋 (金额 = 3)。
 * 偷窃到的最高金额 = 1 + 3 = 4 。
 * 示例 2:
 * <p>
 * 输入: [2,7,9,3,1]
 * 输出: 12
 * 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 * 偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 */
public class Robber {
    /**
     * 典型的dp问题。
     * 我们定义f(n)为num[0]~num[n-1]的最高金额。
     * 则有dp方程：
     * f(n)=max{num[n-1]+f(n-2),f(n-1)}
     * 初始值：
     * f(0)=0,f(1)=num[0]
     * <p>
     * 空间复杂度O(1),时间复杂度O(n)
     *
     * @param nums
     * @return
     */
    public int rob(int[] nums) {
        if (nums.length <= 0) {
            return 0;
        }
        int f0 = 0, f1 = nums[0];
        for (int i = 2; i <= nums.length; i++) {
            int f2 = Math.max(nums[i - 1] + f0, f1);
            f0 = f1;
            f1 = f2;
        }
        return f1;
    }
}
